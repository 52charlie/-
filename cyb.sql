/*
 Navicat MySQL Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80013
 Source Host           : localhost:3306
 Source Schema         : cyb

 Target Server Type    : MySQL
 Target Server Version : 80013
 File Encoding         : 65001

 Date: 05/12/2023 00:48:20
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin`  (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `update_time` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `operate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 21 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES (1, 'admin', '4297f44b13955235245b2497399d7a93', '2023-12-04 22:15:30', '2023-12-04 22:15:30', NULL);
INSERT INTO `admin` VALUES (2, 'admin1', '4297f44b13955235245b2497399d7a93', '2023-12-04 13:18:35', '2023-12-04 13:18:35', NULL);
INSERT INTO `admin` VALUES (3, 'choly', 'df39ae3c77879c20a8ed62651ce37818', '2023-12-04 17:02:59', '2023-12-04 17:02:59', NULL);
INSERT INTO `admin` VALUES (4, 'admin423', '123123', '2023-12-04 22:16:05', '2023-12-04 22:16:05', NULL);
INSERT INTO `admin` VALUES (5, 'admin43', 'b51e8dbebd4ba8a8f342190a4b9f08d7', '2023-12-04 22:14:43', '2023-12-04 22:14:43', NULL);
INSERT INTO `admin` VALUES (6, '123123', 'b51e8dbebd4ba8a8f342190a4b9f08d7', '2023-12-04 22:14:44', '2023-12-04 22:14:44', NULL);
INSERT INTO `admin` VALUES (7, 'qazqaz', 'b51e8dbebd4ba8a8f342190a4b9f08d7', '2023-12-04 22:14:47', '2023-12-04 22:14:47', NULL);
INSERT INTO `admin` VALUES (8, 'jkljkl', 'b51e8dbebd4ba8a8f342190a4b9f08d7', '2023-12-04 15:27:25', '2023-12-04 15:27:25', NULL);
INSERT INTO `admin` VALUES (9, 'asdasdd', 'c9c35cf409344312146fa7546a94d1a6', '2023-12-04 15:27:27', '2023-12-04 15:27:27', NULL);
INSERT INTO `admin` VALUES (10, 'ghjghj', '03a5682f582314c5ec866b89cc030d96', '2023-12-04 15:27:30', '2023-12-04 15:27:30', NULL);
INSERT INTO `admin` VALUES (11, 'jkllkj', '4297f44b13955235245b2497399d7a93', '2023-12-04 15:27:33', '2023-12-04 15:27:33', NULL);
INSERT INTO `admin` VALUES (12, 'fghjfghdfs', 'e10adc3949ba59abbe56e057f20f883e', '2023-12-04 16:52:05', '2023-12-04 16:52:05', NULL);
INSERT INTO `admin` VALUES (13, 'hxyhxy1', '4297f44b13955235245b2497399d7a93', '2023-12-04 22:14:38', '2023-12-04 22:14:38', NULL);
INSERT INTO `admin` VALUES (22, 'helloworld', '4297f44b13955235245b2497399d7a93', '2023-12-04 22:16:25', '2023-12-04 22:16:25', NULL);

-- ----------------------------
-- Table structure for admin_response
-- ----------------------------
DROP TABLE IF EXISTS `admin_response`;
CREATE TABLE `admin_response`  (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `total` int(255) NULL DEFAULT NULL,
  `size` int(10) NULL DEFAULT NULL,
  `current` int(255) NULL DEFAULT NULL,
  `orders` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `optimizeCountSql` int(255) NULL DEFAULT NULL,
  `hitCount` int(255) NULL DEFAULT NULL,
  `countId` int(100) NULL DEFAULT NULL,
  `maxLimit` int(255) NULL DEFAULT NULL,
  `searchCount` int(255) NULL DEFAULT NULL,
  `pages` int(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of admin_response
-- ----------------------------
INSERT INTO `admin_response` VALUES (1, 3, 10, 10, NULL, 0, 0, 10, 10, 0, 1);

-- ----------------------------
-- Table structure for fund_framework
-- ----------------------------
DROP TABLE IF EXISTS `fund_framework`;
CREATE TABLE `fund_framework`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `h1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `h2` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `swipper` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `h3` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `h4` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `time` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `swipper`(`swipper`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of fund_framework
-- ----------------------------
INSERT INTO `fund_framework` VALUES (1, '简介', '刺绣', '中国民间传统手工艺', '1', NULL, NULL, NULL);
INSERT INTO `fund_framework` VALUES (2, '工艺要求', '工艺要求', '', '2', NULL, NULL, NULL);
INSERT INTO `fund_framework` VALUES (3, '京绣', '', '国家级非物质文化遗产', '3', NULL, NULL, NULL);
INSERT INTO `fund_framework` VALUES (4, '苗绣', '苗绣', '雷山苗绣', '4', NULL, NULL, NULL);
INSERT INTO `fund_framework` VALUES (5, '蜀绣', '蜀绣', '刺绣工艺', '5', NULL, NULL, NULL);
INSERT INTO `fund_framework` VALUES (6, '苏绣', '苏绣', '江苏省苏州市民间传统美术', '6', NULL, NULL, NULL);

-- ----------------------------
-- Table structure for home_images
-- ----------------------------
DROP TABLE IF EXISTS `home_images`;
CREATE TABLE `home_images`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `imageName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of home_images
-- ----------------------------
INSERT INTO `home_images` VALUES (1, '/src/assets/images/imgList/1.jpg');
INSERT INTO `home_images` VALUES (2, '/src/assets/images/imgList/2.png');
INSERT INTO `home_images` VALUES (3, '/src/assets/images/imgList/3.jpg');
INSERT INTO `home_images` VALUES (4, '/src/assets/images/imgList/4.jpg');
INSERT INTO `home_images` VALUES (5, '/src/assets/images/imgList/5.jpg');
INSERT INTO `home_images` VALUES (6, '/src/assets/images/imgList/6.jpg');
INSERT INTO `home_images` VALUES (7, '/src/assets/images/imgList/7.png');
INSERT INTO `home_images` VALUES (8, '/src/assets/images/imgList/8.jpg');
INSERT INTO `home_images` VALUES (9, '/src/assets/images/imgList/9.jpg');
INSERT INTO `home_images` VALUES (10, '/src/assets/images/imgList/10.jpeg');
INSERT INTO `home_images` VALUES (11, '/src/assets/images/imgList/11.jpg');
INSERT INTO `home_images` VALUES (12, '/src/assets/images/imgList/12.jpg');
INSERT INTO `home_images` VALUES (13, '/src/assets/images/imgList/13.jpg');
INSERT INTO `home_images` VALUES (14, '/src/assets/images/imgList/14.jpg');
INSERT INTO `home_images` VALUES (15, '/src/assets/images/imgList/15.webp');
INSERT INTO `home_images` VALUES (16, '/src/assets/images/imgList/16.jpg');
INSERT INTO `home_images` VALUES (17, '/src/assets/images/imgList/17.jpg');
INSERT INTO `home_images` VALUES (18, '/src/assets/images/imgList/18.jpg');
INSERT INTO `home_images` VALUES (19, '/src/assets/images/imgList/19.jpg');
INSERT INTO `home_images` VALUES (20, '/src/assets/images/imgList/20.jpg');
INSERT INTO `home_images` VALUES (21, '/src/assets/images/imgList/21.jpg');
INSERT INTO `home_images` VALUES (22, '/src/assets/images/imgList/22.jpg');
INSERT INTO `home_images` VALUES (23, '/src/assets/images/imgList/23.jpg');
INSERT INTO `home_images` VALUES (24, '/src/assets/images/imgList/24.jpg');
INSERT INTO `home_images` VALUES (25, '/src/assets/images/imgList/25.jpg');
INSERT INTO `home_images` VALUES (26, '/src/assets/images/imgList/26.jpg');
INSERT INTO `home_images` VALUES (27, '/src/assets/images/imgList/27.jpg');
INSERT INTO `home_images` VALUES (28, '/src/assets/images/imgList/28.jpg');

-- ----------------------------
-- Table structure for swipper_list
-- ----------------------------
DROP TABLE IF EXISTS `swipper_list`;
CREATE TABLE `swipper_list`  (
  `swipper` int(200) NOT NULL AUTO_INCREMENT,
  `swipper_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item2` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item3` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item4` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item5` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `item6` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `create_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `update_time` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`swipper`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of swipper_list
-- ----------------------------
INSERT INTO `swipper_list` VALUES (1, '简介', 'src\\assets\\images\\briefIntro\\1.jpg', 'src\\assets\\images\\briefIntro\\2.jpg', 'src\\assets\\images\\briefIntro\\3.webp', 'src\\assets\\images\\briefIntro\\4.jpg', 'src\\assets\\images\\briefIntro\\5.jpg', 'src\\assets\\images\\briefIntro\\6.jpg', '2023-11-28 17:31:39', '2023-11-28 17:31:39');
INSERT INTO `swipper_list` VALUES (2, '工艺要求', 'src\\assets\\images\\techRequire\\1.jpg', 'src\\assets\\images\\techRequire\\2.jpg', 'src\\assets\\images\\techRequire\\3.jpg', 'src\\assets\\images\\techRequire\\4.jpg', 'src\\assets\\images\\techRequire\\5.jpg', 'src\\assets\\images\\techRequire\\6.jpg', '2023-11-28 17:36:46', '2023-11-28 17:36:46');
INSERT INTO `swipper_list` VALUES (3, '京绣', 'src\\assets\\images\\jing_xiu\\1.webp', 'src\\assets\\images\\jing_xiu\\2.jpg', 'src\\assets\\images\\jing_xiu\\3.jpg', 'src\\assets\\images\\jing_xiu\\4.jpg', 'src\\assets\\images\\jing_xiu\\5.jpg', 'src\\assets\\images\\jing_xiu\\6.jpg', '2023-11-28 17:47:50', '2023-11-28 17:47:50');
INSERT INTO `swipper_list` VALUES (4, '苗绣', 'src\\assets\\images\\miao_xiu\\1.jpg', 'src\\assets\\images\\miao_xiu\\2.jpg', 'src\\assets\\images\\miao_xiu\\3.jpg', 'src\\assets\\images\\miao_xiu\\4.jpg', 'src\\assets\\images\\miao_xiu\\5.jpg', 'src\\assets\\images\\miao_xiu\\6.jpg', '2023-11-28 17:51:26', '2023-11-28 17:51:26');
INSERT INTO `swipper_list` VALUES (5, '蜀绣', 'src\\assets\\images\\shu_xiu\\1.jpg', 'src\\assets\\images\\shu_xiu\\2.jpg', 'src\\assets\\images\\shu_xiu\\3.jpg', 'src\\assets\\images\\shu_xiu\\4.jpg', 'src\\assets\\images\\shu_xiu\\5.jpg', 'src\\assets\\images\\shu_xiu\\6.jpg', '2023-11-28 17:54:12', '2023-11-28 17:54:12');
INSERT INTO `swipper_list` VALUES (6, '苏绣', 'src\\assets\\images\\su_xiu\\1.jpg', 'src\\assets\\images\\su_xiu\\2.jpg', 'src\\assets\\images\\su_xiu\\3.jpg', 'src\\assets\\images\\su_xiu\\4.jpg', 'src\\assets\\images\\su_xiu\\5.jpeg', 'src\\assets\\images\\su_xiu\\6.jpg', '2023-11-28 17:57:08', '2023-11-28 17:57:08');
INSERT INTO `swipper_list` VALUES (7, '主页', 'src/assets/images/swiper/1.jpg', 'src/assets/images/swiper/2.jpg', 'src/assets/images/swiper/3.jpg', 'src/assets/images/swiper/4.jpg', 'src/assets/images/swiper/5.jpg', 'src/assets/images/swiper/3.jpg', '2023-11-29 14:12:29', '2023-11-29 14:12:29');
INSERT INTO `swipper_list` VALUES (9, 'test', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '2023-12-04 20:30:54', '2023-12-04 20:30:54');
INSERT INTO `swipper_list` VALUES (11, 'qweqwe', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '/src/test/test/1.jpg', '2023-12-04 21:19:49', '2023-12-04 21:19:49');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(100) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `operate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, 'admin', '123123', NULL);
INSERT INTO `user` VALUES (2, 'admin3', 'e10adc3949ba59abbe56e057f20f883e', NULL);
INSERT INTO `user` VALUES (3, 'user1', 'e10adc3949ba59abbe56e057f20f883e', NULL);
INSERT INTO `user` VALUES (4, 'admin2', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (5, 'user7', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (6, 'admin43', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (7, 'user10', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (8, 'user11', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (9, 'user6', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (10, 'user34', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (11, 'user45', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (12, 'choly', 'df39ae3c77879c20a8ed62651ce37818', NULL);
INSERT INTO `user` VALUES (13, 'qweqwe', 'efe6398127928f1b2e9ef3207fb82663', NULL);
INSERT INTO `user` VALUES (14, 'choly3hao', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (15, 'hxyhxy', '4297f44b13955235245b2497399d7a93', NULL);
INSERT INTO `user` VALUES (16, 'user456', '4297f44b13955235245b2497399d7a93', NULL);

-- ----------------------------
-- View structure for x$schema_table_lock_waits
-- ----------------------------
DROP VIEW IF EXISTS `x$schema_table_lock_waits`;
CREATE ALGORITHM = TEMPTABLE SQL SECURITY INVOKER VIEW `x$schema_table_lock_waits` AS select `g`.`OBJECT_SCHEMA` AS `object_schema`,`g`.`OBJECT_NAME` AS `object_name`,`pt`.`THREAD_ID` AS `waiting_thread_id`,`pt`.`PROCESSLIST_ID` AS `waiting_pid`,`sys`.`ps_thread_account`(`p`.`OWNER_THREAD_ID`) AS `waiting_account`,`p`.`LOCK_TYPE` AS `waiting_lock_type`,`p`.`LOCK_DURATION` AS `waiting_lock_duration`,`pt`.`PROCESSLIST_INFO` AS `waiting_query`,`pt`.`PROCESSLIST_TIME` AS `waiting_query_secs`,`ps`.`ROWS_AFFECTED` AS `waiting_query_rows_affected`,`ps`.`ROWS_EXAMINED` AS `waiting_query_rows_examined`,`gt`.`THREAD_ID` AS `blocking_thread_id`,`gt`.`PROCESSLIST_ID` AS `blocking_pid`,`sys`.`ps_thread_account`(`g`.`OWNER_THREAD_ID`) AS `blocking_account`,`g`.`LOCK_TYPE` AS `blocking_lock_type`,`g`.`LOCK_DURATION` AS `blocking_lock_duration`,concat('KILL QUERY ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_query`,concat('KILL ',`gt`.`PROCESSLIST_ID`) AS `sql_kill_blocking_connection` from (((((`performance_schema`.`metadata_locks` `g` join `performance_schema`.`metadata_locks` `p` on(((`g`.`OBJECT_TYPE` = `p`.`OBJECT_TYPE`) and (`g`.`OBJECT_SCHEMA` = `p`.`OBJECT_SCHEMA`) and (`g`.`OBJECT_NAME` = `p`.`OBJECT_NAME`) and (`g`.`LOCK_STATUS` = 'GRANTED') and (`p`.`LOCK_STATUS` = 'PENDING')))) join `performance_schema`.`threads` `gt` on((`g`.`OWNER_THREAD_ID` = `gt`.`THREAD_ID`))) join `performance_schema`.`threads` `pt` on((`p`.`OWNER_THREAD_ID` = `pt`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `gs` on((`g`.`OWNER_THREAD_ID` = `gs`.`THREAD_ID`))) left join `performance_schema`.`events_statements_current` `ps` on((`p`.`OWNER_THREAD_ID` = `ps`.`THREAD_ID`))) where (`g`.`OBJECT_TYPE` = 'TABLE');

-- ----------------------------
-- Procedure structure for ps_trace_thread
-- ----------------------------
DROP PROCEDURE IF EXISTS `ps_trace_thread`;
delimiter ;;
CREATE PROCEDURE `ps_trace_thread`(IN in_thread_id BIGINT UNSIGNED, IN in_outfile VARCHAR(255), IN in_max_runtime DECIMAL(20,2), IN in_interval DECIMAL(20,2), IN in_start_fresh BOOLEAN, IN in_auto_setup BOOLEAN, IN in_debug BOOLEAN)
  MODIFIES SQL DATA 
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Dumps all data within Performance Schema for an instrumented thread,\r\n to create a DOT formatted graph file. \r\n \r\n Each resultset returned from the procedure should be used for a complete graph\r\n \r\n Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\r\n \r\n Parameters\r\n \r\n in_thread_id (BIGINT UNSIGNED):\r\n The thread that you would like a stack trace for\r\n in_outfile  (VARCHAR(255)):\r\n The filename the dot file will be written to\r\n in_max_runtime (DECIMAL(20,2)):\r\n The maximum time to keep collecting data.\r\n Use NULL to get the default which is 60 seconds.\r\n in_interval (DECIMAL(20,2)): \r\n How long to sleep between data collections. \r\n Use NULL to get the default which is 1 second.\r\n in_start_fresh (BOOLEAN):\r\n Whether to reset all Performance Schema data before tracing.\r\n in_auto_setup (BOOLEAN):\r\n Whether to disable all other threads and enable all consumers/instruments. \r\n This will also reset the settings at the end of the run.\r\n in_debug (BOOLEAN):\r\n Whether you would like to include file:lineno in the graph\r\n \r\n Example\r\n \r\n mysql> CALL sys.ps_trace_thread(25, CONCAT(\'/tmp/stack-\', REPLACE(NOW(), \' \', \'-\'), \'.dot\'), NULL, NULL, TRUE, TRUE, TRUE);\r\n +-------------------+\r\n | summary           |\r\n +-------------------+\r\n | Disabled 1 thread |\r\n +-------------------+\r\n 1 row in set (0.00 sec)\r\n \r\n +---------------------------------------------+\r\n | Info                                        |\r\n +---------------------------------------------+\r\n | Data collection starting for THREAD_ID = 25 |\r\n +---------------------------------------------+\r\n 1 row in set (0.03 sec)\r\n \r\n +-----------------------------------------------------------+\r\n | Info                                                      |\r\n +-----------------------------------------------------------+\r\n | Stack trace written to /tmp/stack-2014-02-16-21:18:41.dot |\r\n +-----------------------------------------------------------+\r\n 1 row in set (60.07 sec)\r\n \r\n +-------------------------------------------------------------------+\r\n | Convert to PDF                                                    |\r\n +-------------------------------------------------------------------+\r\n | dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2014-02-16-21:18:41.dot |\r\n +-------------------------------------------------------------------+\r\n 1 row in set (60.07 sec)\r\n \r\n +-------------------------------------------------------------------+\r\n | Convert to PNG                                                    |\r\n +-------------------------------------------------------------------+\r\n | dot -Tpng -o /tmp/stack_25.png /tmp/stack-2014-02-16-21:18:41.dot |\r\n +-------------------------------------------------------------------+\r\n 1 row in set (60.07 sec)\r\n \r\n +------------------+\r\n | summary          |\r\n +------------------+\r\n | Enabled 1 thread |\r\n +------------------+\r\n 1 row in set (60.32 sec)\r\n '
BEGIN DECLARE v_done bool DEFAULT FALSE; DECLARE v_start, v_runtime DECIMAL(20,2) DEFAULT 0.0; DECLARE v_min_event_id bigint unsigned DEFAULT 0; DECLARE v_this_thread_enabed ENUM('YES', 'NO'); DECLARE v_event longtext; DECLARE c_stack CURSOR FOR SELECT CONCAT(IF(nesting_event_id IS NOT NULL, CONCAT(nesting_event_id, ' -> '), ''),  event_id, '; ', event_id, ' [label="', '(', sys.format_time(timer_wait), ') ', IF (event_name NOT LIKE 'wait/io%',  SUBSTRING_INDEX(event_name, '/', -2),  IF (event_name NOT LIKE 'wait/io/file%' OR event_name NOT LIKE 'wait/io/socket%', SUBSTRING_INDEX(event_name, '/', -4), event_name) ), IF (event_name LIKE 'transaction', IFNULL(CONCAT('\\n', wait_info), ''), ''), IF (event_name LIKE 'statement/%', IFNULL(CONCAT('\\n', wait_info), ''), ''), IF (in_debug AND event_name LIKE 'wait%', wait_info, ''), '", ',  CASE WHEN event_name LIKE 'wait/io/file%' THEN  'shape=box, style=filled, color=red' WHEN event_name LIKE 'wait/io/table%' THEN  'shape=box, style=filled, color=green' WHEN event_name LIKE 'wait/io/socket%' THEN 'shape=box, style=filled, color=yellow' WHEN event_name LIKE 'wait/synch/mutex%' THEN 'style=filled, color=lightskyblue' WHEN event_name LIKE 'wait/synch/cond%' THEN 'style=filled, color=darkseagreen3' WHEN event_name LIKE 'wait/synch/rwlock%' THEN 'style=filled, color=orchid' WHEN event_name LIKE 'wait/synch/sxlock%' THEN 'style=filled, color=palevioletred'  WHEN event_name LIKE 'wait/lock%' THEN 'shape=box, style=filled, color=tan' WHEN event_name LIKE 'statement/%' THEN CONCAT('shape=box, style=bold', CASE WHEN event_name LIKE 'statement/com/%' THEN ' style=filled, color=darkseagreen' ELSE IF((timer_wait/1000000000000) > @@long_query_time,  ' style=filled, color=red',  ' style=filled, color=lightblue') END ) WHEN event_name LIKE 'transaction' THEN 'shape=box, style=filled, color=lightblue3' WHEN event_name LIKE 'stage/%' THEN 'style=filled, color=slategray3' WHEN event_name LIKE '%idle%' THEN 'shape=box, style=filled, color=firebrick3' ELSE '' END, '];\n' ) event, event_id FROM ( (SELECT thread_id, event_id, event_name, timer_wait, timer_start, nesting_event_id, CONCAT('trx_id: ',  IFNULL(trx_id, ''), '\\n', 'gtid: ', IFNULL(gtid, ''), '\\n', 'state: ', state, '\\n', 'mode: ', access_mode, '\\n', 'isolation: ', isolation_level, '\\n', 'autocommit: ', autocommit, '\\n', 'savepoints: ', number_of_savepoints, '\\n' ) AS wait_info FROM performance_schema.events_transactions_history_long WHERE thread_id = in_thread_id AND event_id > v_min_event_id) UNION (SELECT thread_id, event_id, event_name, timer_wait, timer_start, nesting_event_id,  CONCAT('statement: ', sql_text, '\\n', 'errors: ', errors, '\\n', 'warnings: ', warnings, '\\n', 'lock time: ', sys.format_time(lock_time),'\\n', 'rows affected: ', rows_affected, '\\n', 'rows sent: ', rows_sent, '\\n', 'rows examined: ', rows_examined, '\\n', 'tmp tables: ', created_tmp_tables, '\\n', 'tmp disk tables: ', created_tmp_disk_tables, '\\n' 'select scan: ', select_scan, '\\n', 'select full join: ', select_full_join, '\\n', 'select full range join: ', select_full_range_join, '\\n', 'select range: ', select_range, '\\n', 'select range check: ', select_range_check, '\\n',  'sort merge passes: ', sort_merge_passes, '\\n', 'sort rows: ', sort_rows, '\\n', 'sort range: ', sort_range, '\\n', 'sort scan: ', sort_scan, '\\n', 'no index used: ', IF(no_index_used, 'TRUE', 'FALSE'), '\\n', 'no good index used: ', IF(no_good_index_used, 'TRUE', 'FALSE'), '\\n' ) AS wait_info FROM performance_schema.events_statements_history_long WHERE thread_id = in_thread_id AND event_id > v_min_event_id) UNION (SELECT thread_id, event_id, event_name, timer_wait, timer_start, nesting_event_id, null AS wait_info FROM performance_schema.events_stages_history_long  WHERE thread_id = in_thread_id AND event_id > v_min_event_id) UNION  (SELECT thread_id, event_id,  CONCAT(event_name,  IF(event_name NOT LIKE 'wait/synch/mutex%', IFNULL(CONCAT(' - ', operation), ''), ''),  IF(number_of_bytes IS NOT NULL, CONCAT(' ', number_of_bytes, ' bytes'), ''), IF(event_name LIKE 'wait/io/file%', '\\n', ''), IF(object_schema IS NOT NULL, CONCAT('\\nObject: ', object_schema, '.'), ''),  IF(object_name IS NOT NULL,  IF (event_name LIKE 'wait/io/socket%', CONCAT('\\n', IF (object_name LIKE ':0%', @@socket, object_name)), object_name), '' ), IF(index_name IS NOT NULL, CONCAT(' Index: ', index_name), ''), '\\n' ) AS event_name, timer_wait, timer_start, nesting_event_id, source AS wait_info FROM performance_schema.events_waits_history_long WHERE thread_id = in_thread_id AND event_id > v_min_event_id) ) events  ORDER BY event_id; DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;  SET @log_bin := @@sql_log_bin; SET sql_log_bin = 0;  SELECT INSTRUMENTED INTO v_this_thread_enabed FROM performance_schema.threads WHERE PROCESSLIST_ID = CONNECTION_ID(); CALL sys.ps_setup_disable_thread(CONNECTION_ID());  IF (in_auto_setup) THEN CALL sys.ps_setup_save(0);  DELETE FROM performance_schema.setup_actors;  UPDATE performance_schema.threads SET INSTRUMENTED = IF(THREAD_ID = in_thread_id, 'YES', 'NO');  UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME NOT LIKE '%\_history';  UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED   = 'YES'; END IF;  IF (in_start_fresh) THEN TRUNCATE performance_schema.events_transactions_history_long; TRUNCATE performance_schema.events_statements_history_long; TRUNCATE performance_schema.events_stages_history_long; TRUNCATE performance_schema.events_waits_history_long; END IF;  DROP TEMPORARY TABLE IF EXISTS tmp_events; CREATE TEMPORARY TABLE tmp_events ( event_id bigint unsigned NOT NULL, event longblob, PRIMARY KEY (event_id) );  INSERT INTO tmp_events VALUES (0, CONCAT('digraph events { rankdir=LR; nodesep=0.10;\n', '// Stack created .....: ', NOW(), '\n', '// MySQL version .....: ', VERSION(), '\n', '// MySQL hostname ....: ', @@hostname, '\n', '// MySQL port ........: ', @@port, '\n', '// MySQL socket ......: ', @@socket, '\n', '// MySQL user ........: ', CURRENT_USER(), '\n'));  SELECT CONCAT('Data collection starting for THREAD_ID = ', in_thread_id) AS 'Info';  SET v_min_event_id = 0, v_start        = UNIX_TIMESTAMP(), in_interval    = IFNULL(in_interval, 1.00), in_max_runtime = IFNULL(in_max_runtime, 60.00);  WHILE (v_runtime < in_max_runtime AND (SELECT INSTRUMENTED FROM performance_schema.threads WHERE THREAD_ID = in_thread_id) = 'YES') DO SET v_done = FALSE; OPEN c_stack; c_stack_loop: LOOP FETCH c_stack INTO v_event, v_min_event_id; IF v_done THEN LEAVE c_stack_loop; END IF;  IF (LENGTH(v_event) > 0) THEN INSERT INTO tmp_events VALUES (v_min_event_id, v_event); END IF; END LOOP; CLOSE c_stack;  SELECT SLEEP(in_interval) INTO @sleep; SET v_runtime = (UNIX_TIMESTAMP() - v_start); END WHILE;  INSERT INTO tmp_events VALUES (v_min_event_id+1, '}');  SET @query = CONCAT('SELECT event FROM tmp_events ORDER BY event_id INTO OUTFILE ''', in_outfile, ''' FIELDS ESCAPED BY '''' LINES TERMINATED BY '''''); PREPARE stmt_output FROM @query; EXECUTE stmt_output; DEALLOCATE PREPARE stmt_output;  SELECT CONCAT('Stack trace written to ', in_outfile) AS 'Info'; SELECT CONCAT('dot -Tpdf -o /tmp/stack_', in_thread_id, '.pdf ', in_outfile) AS 'Convert to PDF'; SELECT CONCAT('dot -Tpng -o /tmp/stack_', in_thread_id, '.png ', in_outfile) AS 'Convert to PNG'; DROP TEMPORARY TABLE tmp_events;  IF (in_auto_setup) THEN CALL sys.ps_setup_reload_saved(); END IF; IF (v_this_thread_enabed = 'YES') THEN CALL sys.ps_setup_enable_thread(CONNECTION_ID()); END IF;  SET sql_log_bin = @log_bin; END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for ps_truncate_all_tables
-- ----------------------------
DROP PROCEDURE IF EXISTS `ps_truncate_all_tables`;
delimiter ;;
CREATE PROCEDURE `ps_truncate_all_tables`(IN in_verbose BOOLEAN)
  MODIFIES SQL DATA 
  DETERMINISTIC
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Truncates all summary tables within Performance Schema, \r\n resetting all aggregated instrumentation as a snapshot.\r\n \r\n Parameters\r\n \r\n in_verbose (BOOLEAN):\r\n Whether to print each TRUNCATE statement before running\r\n \r\n Example\r\n \r\n mysql> CALL sys.ps_truncate_all_tables(false);\r\n +---------------------+\r\n | summary             |\r\n +---------------------+\r\n | Truncated 44 tables |\r\n +---------------------+\r\n 1 row in set (0.10 sec)\r\n \r\n Query OK, 0 rows affected (0.10 sec)\r\n '
BEGIN DECLARE v_done INT DEFAULT FALSE; DECLARE v_total_tables INT DEFAULT 0; DECLARE v_ps_table VARCHAR(64); DECLARE ps_tables CURSOR FOR SELECT table_name  FROM INFORMATION_SCHEMA.TABLES  WHERE table_schema = 'performance_schema'  AND (table_name LIKE '%summary%'  OR table_name LIKE '%history%'); DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = TRUE;  OPEN ps_tables;  ps_tables_loop: LOOP FETCH ps_tables INTO v_ps_table; IF v_done THEN LEAVE ps_tables_loop; END IF;  SET @truncate_stmt := CONCAT('TRUNCATE TABLE performance_schema.', v_ps_table); IF in_verbose THEN SELECT CONCAT('Running: ', @truncate_stmt) AS status; END IF;  PREPARE truncate_stmt FROM @truncate_stmt; EXECUTE truncate_stmt; DEALLOCATE PREPARE truncate_stmt;  SET v_total_tables = v_total_tables + 1; END LOOP;  CLOSE ps_tables;  SELECT CONCAT('Truncated ', v_total_tables, ' tables') AS summary;  END
;;
delimiter ;

-- ----------------------------
-- Function structure for quote_identifier
-- ----------------------------
DROP FUNCTION IF EXISTS `quote_identifier`;
delimiter ;;
CREATE FUNCTION `quote_identifier`(in_identifier TEXT)
 RETURNS text CHARSET utf8mb4
  NO SQL 
  DETERMINISTIC
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Takes an unquoted identifier (schema name, table name, etc.) and\r\n returns the identifier quoted with backticks.\r\n \r\n Parameters\r\n \r\n in_identifier (TEXT):\r\n The identifier to quote.\r\n \r\n Returns\r\n \r\n TEXT CHARSET UTF8MB4\r\n \r\n Example\r\n \r\n mysql> SELECT sys.quote_identifier(\'my_identifier\') AS Identifier;\r\n +-----------------+\r\n | Identifier      |\r\n +-----------------+\r\n | `my_identifier` |\r\n +-----------------+\r\n 1 row in set (0.00 sec)\r\n \r\n mysql> SELECT sys.quote_identifier(\'my`idenfier\') AS Identifier;\r\n +----------------+\r\n | Identifier     |\r\n +----------------+\r\n | `my``idenfier` |\r\n +----------------+\r\n 1 row in set (0.00 sec)\r\n '
BEGIN RETURN CONCAT('`', REPLACE(in_identifier, '`', '``'), '`'); END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for statement_performance_analyzer
-- ----------------------------
DROP PROCEDURE IF EXISTS `statement_performance_analyzer`;
delimiter ;;
CREATE PROCEDURE `statement_performance_analyzer`(IN in_action ENUM('snapshot', 'overall', 'delta', 'create_table', 'create_tmp', 'save', 'cleanup'), IN in_table VARCHAR(129), IN in_views SET ('with_runtimes_in_95th_percentile', 'analysis', 'with_errors_or_warnings', 'with_full_table_scans', 'with_sorting', 'with_temp_tables', 'custom'))
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Create a report of the statements running on the server.\r\n \r\n The views are calculated based on the overall and/or delta activity.\r\n \r\n Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\r\n \r\n Parameters\r\n \r\n in_action (ENUM(\'snapshot\', \'overall\', \'delta\', \'create_tmp\', \'create_table\', \'save\', \'cleanup\')):\r\n The action to take. Supported actions are:\r\n * snapshot      Store a snapshot. The default is to make a snapshot of the current content of\r\n performance_schema.events_statements_summary_by_digest, but by setting in_table\r\n this can be overwritten to copy the content of the specified table.\r\n The snapshot is stored in the sys.tmp_digests temporary table.\r\n * overall       Generate analyzis based on the content specified by in_table. For the overall analyzis,\r\n in_table can be NOW() to use a fresh snapshot. This will overwrite an existing snapshot.\r\n Use NULL for in_table to use the existing snapshot. If in_table IS NULL and no snapshot\r\n exists, a new will be created.\r\n See also in_views and @sys.statement_performance_analyzer.limit.\r\n * delta         Generate a delta analysis. The delta will be calculated between the reference table in\r\n in_table and the snapshot. An existing snapshot must exist.\r\n The action uses the sys.tmp_digests_delta temporary table.\r\n See also in_views and @sys.statement_performance_analyzer.limit.\r\n * create_table  Create a regular table suitable for storing the snapshot for later use, e.g. for\r\n calculating deltas.\r\n * create_tmp    Create a temporary table suitable for storing the snapshot for later use, e.g. for\r\n calculating deltas.\r\n * save          Save the snapshot in the table specified by in_table. The table must exists and have\r\n the correct structure.\r\n If no snapshot exists, a new is created.\r\n * cleanup       Remove the temporary tables used for the snapshot and delta.\r\n \r\n in_table (VARCHAR(129)):\r\n The table argument used for some actions. Use the format \'db1.t1\' or \'t1\' without using any backticks (`)\r\n for quoting. Periods (.) are not supported in the database and table names.\r\n \r\n The meaning of the table for each action supporting the argument is:\r\n \r\n * snapshot      The snapshot is created based on the specified table. Set to NULL or NOW() to use\r\n the current content of performance_schema.events_statements_summary_by_digest.\r\n * overall       The table with the content to create the overall analyzis for. The following values\r\n can be used:\r\n - A table name - use the content of that table.\r\n - NOW()        - create a fresh snapshot and overwrite the existing snapshot.\r\n - NULL         - use the last stored snapshot.\r\n * delta         The table name is mandatory and specified the reference view to compare the currently\r\n stored snapshot against. If no snapshot exists, a new will be created.\r\n * create_table  The name of the regular table to create.\r\n * create_tmp    The name of the temporary table to create.\r\n * save          The name of the table to save the currently stored snapshot into.\r\n \r\n in_views (SET (\'with_runtimes_in_95th_percentile\', \'analysis\', \'with_errors_or_warnings\',\r\n \'with_full_table_scans\', \'with_sorting\', \'with_temp_tables\', \'custom\'))\r\n Which views to include:  * with_runtimes_in_95th_percentile  Based on the sys.statements_with_runtimes_in_95th_percentile view * analysis                          Based on the sys.statement_analysis view * with_errors_or_warnings           Based on the sys.statements_with_errors_or_warnings view * with_full_table_scans             Based on the sys.statements_with_full_table_scans view * with_sorting                      Based on the sys.statements_with_sorting view * with_temp_tables                  Based on the sys.statements_with_temp_tables view * custom                            Use a custom view. This view must be specified in @sys.statement_performance_analyzer.view to an existing view or a query  Default is to include all except \'custom\'.   Configuration Options  sys.statement_performance_analyzer.limit The maximum number of rows to include for the views that does not have a built-in limit (e.g. the 95th percentile view). If not set the limit is 100.  sys.statement_performance_analyzer.view Used together with the \'custom\' view. If the value contains a space, it is considered a query, otherwise it must be an existing view querying the performance_schema.events_statements_summary_by_digest table. There cannot be any limit clause including in the query or view definition if @sys.statement_performance_analyzer.limit > 0. If specifying a view, use the same format as for in_table.  sys.debug Whether to provide debugging output. Default is \'OFF\'. Set to \'ON\' to include.   Example  To create a report with the queries in the 95th percentile since last truncate of performance_schema.events_statements_summary_by_digest and the delta for a 1 minute period:  1. Create a temporary table to store the initial snapshot. 2. Create the initial snapshot. 3. Save the initial snapshot in the temporary table. 4. Wait one minute. 5. Create a new snapshot. 6. Perform analyzis based on the new snapshot. 7. Perform analyzis based on the delta between the initial and new snapshots.  mysql> CALL sys.statement_performance_analyzer(\'create_tmp\', \'mydb.tmp_digests_ini\', NULL); Query OK, 0 rows affected (0.08 sec)  mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL); Query OK, 0 rows affected (0.02 sec)  mysql> CALL sys.statement_performance_analyzer(\'save\', \'mydb.tmp_digests_ini\', NULL); Query OK, 0 rows affected (0.00 sec)  mysql> DO SLEEP(60); Query OK, 0 rows affected (1 min 0.00 sec)  mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL); Query OK, 0 rows affected (0.02 sec)  mysql> CALL sys.statement_performance_analyzer(\'overall\', NULL, \'with_runtimes_in_95th_percentile\'); +-----------------------------------------+ | Next Output                             | +-----------------------------------------+ | Queries with Runtime in 95th Percentile | +-----------------------------------------+ 1 row in set (0.05 sec)  ...  mysql> CALL sys.statement_performance_analyzer(\'delta\', \'mydb.tmp_digests_ini\', \'with_runtimes_in_95th_percentile\'); +-----------------------------------------+ | Next Output                             | +-----------------------------------------+ | Queries with Runtime in 95th Percentile | +-----------------------------------------+ 1 row in set (0.03 sec)  ...   To create an overall report of the 95th percentile queries and the top 10 queries with full table scans:  mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL); Query OK, 0 rows affected (0.01 sec)  mysql> SET @sys.statement_performance_analyzer.limit = 10; Query OK, 0 rows affected (0.00 sec)  mysql> CALL sys.statement_performance_analyzer(\'overall\', NULL, \'with_runtimes_in_95th_percentile,with_full_table_scans\'); +-----------------------------------------+ | Next Output                             | +-----------------------------------------+ | Queries with Runtime in 95th Percentile | +-----------------------------------------+ 1 row in set (0.01 sec)  ...  +-------------------------------------+ | Next Output                         | +-------------------------------------+ | Top 10 Queries with Full Table Scan | +-------------------------------------+ 1 row in set (0.09 sec)  ...   Use a custom view showing the top 10 query sorted by total execution time refreshing the view every minute using the watch command in Linux.  mysql> CREATE OR REPLACE VIEW mydb.my_statements AS -> SELECT sys.format_statement(DIGEST_TEXT) AS query, ->        SCHEMA_NAME AS db, ->        COUNT_STAR AS exec_count, ->        sys.format_time(SUM_TIMER_WAIT) AS total_latency, ->        sys.format_time(AVG_TIMER_WAIT) AS avg_latency, ->        ROUND(IFNULL(SUM_ROWS_SENT / NULLIF(COUNT_STAR, 0), 0)) AS rows_sent_avg, ->        ROUND(IFNULL(SUM_ROWS_EXAMINED / NULLIF(COUNT_STAR, 0), 0)) AS rows_examined_avg, ->        ROUND(IFNULL(SUM_ROWS_AFFECTED / NULLIF(COUNT_STAR, 0), 0)) AS rows_affected_avg, ->        DIGEST AS digest ->   FROM performance_schema.events_statements_summary_by_digest -> ORDER BY SUM_TIMER_WAIT DESC; Query OK, 0 rows affected (0.01 sec)  mysql> CALL sys.statement_performance_analyzer(\'create_table\', \'mydb.digests_prev\', NULL); Query OK, 0 rows affected (0.10 sec)  shell$ watch -n 60 \"mysql sys --table -e \" > SET @sys.statement_performance_analyzer.view = \'mydb.my_statements\'; > SET @sys.statement_performance_analyzer.limit = 10; > CALL statement_performance_analyzer(\'snapshot\', NULL, NULL); > CALL statement_performance_analyzer(\'delta\', \'mydb.digests_prev\', \'custom\'); > CALL statement_performance_analyzer(\'save\', \'mydb.digests_prev\', NULL); > \"\"  Every 60.0s: mysql sys --table -e \"                                                                                                   ...  Mon Dec 22 10:58:51 2014  +----------------------------------+ | Next Output                      | +----------------------------------+ | Top 10 Queries Using Custom View | +----------------------------------+ +-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+ | query             | db    | exec_count | total_latency | avg_latency | rows_sent_avg | rows_examined_avg | rows_affected_avg | digest                           | +-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+ ... '
BEGIN DECLARE v_table_exists, v_tmp_digests_table_exists, v_custom_view_exists ENUM('', 'BASE TABLE', 'VIEW', 'TEMPORARY') DEFAULT ''; DECLARE v_this_thread_enabled ENUM('YES', 'NO'); DECLARE v_force_new_snapshot BOOLEAN DEFAULT FALSE; DECLARE v_digests_table VARCHAR(133); DECLARE v_quoted_table, v_quoted_custom_view VARCHAR(133) DEFAULT ''; DECLARE v_table_db, v_table_name, v_custom_db, v_custom_name VARCHAR(64); DECLARE v_digest_table_template, v_checksum_ref, v_checksum_table text; DECLARE v_sql longtext; DECLARE v_error_msg VARCHAR(128); DECLARE v_old_group_concat_max_len INT UNSIGNED DEFAULT 0;   SELECT INSTRUMENTED INTO v_this_thread_enabled FROM performance_schema.threads WHERE PROCESSLIST_ID = CONNECTION_ID(); IF (v_this_thread_enabled = 'YES') THEN CALL sys.ps_setup_disable_thread(CONNECTION_ID()); END IF;  SET @log_bin := @@sql_log_bin; IF (@log_bin = 1) THEN SET sql_log_bin = 0; END IF;   IF (@sys.statement_performance_analyzer.limit IS NULL) THEN SET @sys.statement_performance_analyzer.limit = sys.sys_get_config('statement_performance_analyzer.limit', '100'); END IF; IF (@sys.debug IS NULL) THEN SET @sys.debug                                = sys.sys_get_config('debug'                               , 'OFF'); END IF;   IF (in_table = 'NOW()') THEN SET v_force_new_snapshot = TRUE, in_table             = NULL; ELSEIF (in_table IS NOT NULL) THEN IF (NOT INSTR(in_table, '.')) THEN SET v_table_db   = DATABASE(), v_table_name = in_table; ELSE SET v_table_db   = SUBSTRING_INDEX(in_table, '.', 1); SET v_table_name = SUBSTRING(in_table, CHAR_LENGTH(v_table_db)+2); END IF;  SET v_quoted_table = CONCAT('`', v_table_db, '`.`', v_table_name, '`');  IF (@sys.debug = 'ON') THEN SELECT CONCAT('in_table is: db = ''', v_table_db, ''', table = ''', v_table_name, '''') AS 'Debug'; END IF;  IF (v_table_db = DATABASE() AND (v_table_name = 'tmp_digests' OR v_table_name = 'tmp_digests_delta')) THEN SET v_error_msg = CONCAT('Invalid value for in_table: ', v_quoted_table, ' is reserved table name.'); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF;  CALL sys.table_exists(v_table_db, v_table_name, v_table_exists); IF (@sys.debug = 'ON') THEN SELECT CONCAT('v_table_exists = ', v_table_exists) AS 'Debug'; END IF;  IF (v_table_exists = 'BASE TABLE') THEN SET v_old_group_concat_max_len = @@session.group_concat_max_len; SET @@session.group_concat_max_len = 2048; SET v_checksum_ref = ( SELECT GROUP_CONCAT(CONCAT(COLUMN_NAME, COLUMN_TYPE) ORDER BY ORDINAL_POSITION) AS Checksum FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'performance_schema' AND TABLE_NAME = 'events_statements_summary_by_digest' ), v_checksum_table = ( SELECT GROUP_CONCAT(CONCAT(COLUMN_NAME, COLUMN_TYPE) ORDER BY ORDINAL_POSITION) AS Checksum FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = v_table_db AND TABLE_NAME = v_table_name ); SET @@session.group_concat_max_len = v_old_group_concat_max_len; IF (v_checksum_ref <> v_checksum_table) THEN SET v_error_msg = CONCAT('The table ', IF(CHAR_LENGTH(v_quoted_table) > 93, CONCAT('...', SUBSTRING(v_quoted_table, -90)), v_quoted_table), ' has the wrong definition.'); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF; END IF; END IF;   IF (in_views IS NULL OR in_views = '') THEN SET in_views = 'with_runtimes_in_95th_percentile,analysis,with_errors_or_warnings,with_full_table_scans,with_sorting,with_temp_tables'; END IF;   CALL sys.table_exists(DATABASE(), 'tmp_digests', v_tmp_digests_table_exists); IF (@sys.debug = 'ON') THEN SELECT CONCAT('v_tmp_digests_table_exists = ', v_tmp_digests_table_exists) AS 'Debug'; END IF;  CASE WHEN in_action IN ('snapshot', 'overall') THEN IF (in_table IS NOT NULL) THEN IF (NOT v_table_exists IN ('TEMPORARY', 'BASE TABLE')) THEN SET v_error_msg = CONCAT('The ', in_action, ' action requires in_table to be NULL, NOW() or specify an existing table.', ' The table ', IF(CHAR_LENGTH(v_quoted_table) > 16, CONCAT('...', SUBSTRING(v_quoted_table, -13)), v_quoted_table), ' does not exist.'); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF; END IF;  WHEN in_action IN ('delta', 'save') THEN IF (v_table_exists NOT IN ('TEMPORARY', 'BASE TABLE')) THEN SET v_error_msg = CONCAT('The ', in_action, ' action requires in_table to be an existing table.', IF(in_table IS NOT NULL, CONCAT(' The table ', IF(CHAR_LENGTH(v_quoted_table) > 39, CONCAT('...', SUBSTRING(v_quoted_table, -36)), v_quoted_table), ' does not exist.'), '')); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF;  IF (in_action = 'delta' AND v_tmp_digests_table_exists <> 'TEMPORARY') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'An existing snapshot generated with the statement_performance_analyzer() must exist.'; END IF; WHEN in_action = 'create_tmp' THEN IF (v_table_exists = 'TEMPORARY') THEN SET v_error_msg = CONCAT('Cannot create the table ', IF(CHAR_LENGTH(v_quoted_table) > 72, CONCAT('...', SUBSTRING(v_quoted_table, -69)), v_quoted_table), ' as it already exists.'); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF;  WHEN in_action = 'create_table' THEN IF (v_table_exists <> '') THEN SET v_error_msg = CONCAT('Cannot create the table ', IF(CHAR_LENGTH(v_quoted_table) > 52, CONCAT('...', SUBSTRING(v_quoted_table, -49)), v_quoted_table), ' as it already exists', IF(v_table_exists = 'TEMPORARY', ' as a temporary table.', '.')); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_error_msg; END IF;  WHEN in_action = 'cleanup' THEN DO (SELECT 1); ELSE SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Unknown action. Supported actions are: cleanup, create_table, create_tmp, delta, overall, save, snapshot'; END CASE;  SET v_digest_table_template = 'CREATE %{TEMPORARY}TABLE %{TABLE_NAME} ( `SCHEMA_NAME` varchar(64) DEFAULT NULL, `DIGEST` varchar(64) DEFAULT NULL, `DIGEST_TEXT` longtext, `COUNT_STAR` bigint(20) unsigned NOT NULL, `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL, `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL, `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL, `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL, `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL, `SUM_ERRORS` bigint(20) unsigned NOT NULL, `SUM_WARNINGS` bigint(20) unsigned NOT NULL, `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL, `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL, `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL, `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL, `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL, `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL, `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL, `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL, `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL, `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL, `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL, `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL, `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL, `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL, `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL, `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL, `FIRST_SEEN` timestamp(6) NULL DEFAULT NULL, `LAST_SEEN` timestamp(6) NULL DEFAULT NULL, `QUANTILE_95` bigint(20) unsigned NOT NULL, `QUANTILE_99` bigint(20) unsigned NOT NULL, `QUANTILE_999` bigint(20) unsigned NOT NULL, `QUERY_SAMPLE_TEXT` longtext, `QUERY_SAMPLE_SEEN` timestamp(6) NULL DEFAULT NULL, `QUERY_SAMPLE_TIMER_WAIT` bigint(20) unsigned NOT NULL, INDEX (SCHEMA_NAME, DIGEST) ) DEFAULT CHARSET=utf8mb4';  IF (v_force_new_snapshot OR in_action = 'snapshot' OR (in_action = 'overall' AND in_table IS NULL) OR (in_action = 'save' AND v_tmp_digests_table_exists <> 'TEMPORARY') ) THEN IF (v_tmp_digests_table_exists = 'TEMPORARY') THEN IF (@sys.debug = 'ON') THEN SELECT 'DROP TEMPORARY TABLE IF EXISTS tmp_digests' AS 'Debug'; END IF; DROP TEMPORARY TABLE IF EXISTS tmp_digests; END IF; CALL sys.execute_prepared_stmt(REPLACE(REPLACE(v_digest_table_template, '%{TEMPORARY}', 'TEMPORARY '), '%{TABLE_NAME}', 'tmp_digests'));  SET v_sql = CONCAT('INSERT INTO tmp_digests SELECT * FROM ', IF(in_table IS NULL OR in_action = 'save', 'performance_schema.events_statements_summary_by_digest', v_quoted_table)); CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (in_action IN ('create_table', 'create_tmp')) THEN IF (in_action = 'create_table') THEN CALL sys.execute_prepared_stmt(REPLACE(REPLACE(v_digest_table_template, '%{TEMPORARY}', ''), '%{TABLE_NAME}', v_quoted_table)); ELSE CALL sys.execute_prepared_stmt(REPLACE(REPLACE(v_digest_table_template, '%{TEMPORARY}', 'TEMPORARY '), '%{TABLE_NAME}', v_quoted_table)); END IF; ELSEIF (in_action = 'save') THEN CALL sys.execute_prepared_stmt(CONCAT('DELETE FROM ', v_quoted_table)); CALL sys.execute_prepared_stmt(CONCAT('INSERT INTO ', v_quoted_table, ' SELECT * FROM tmp_digests')); ELSEIF (in_action = 'cleanup') THEN DROP TEMPORARY TABLE IF EXISTS sys.tmp_digests; DROP TEMPORARY TABLE IF EXISTS sys.tmp_digests_delta; ELSEIF (in_action IN ('overall', 'delta')) THEN IF (in_action = 'overall') THEN IF (in_table IS NULL) THEN SET v_digests_table = 'tmp_digests'; ELSE SET v_digests_table = v_quoted_table; END IF; ELSE SET v_digests_table = 'tmp_digests_delta'; DROP TEMPORARY TABLE IF EXISTS tmp_digests_delta; CREATE TEMPORARY TABLE tmp_digests_delta LIKE tmp_digests; SET v_sql = CONCAT('INSERT INTO tmp_digests_delta SELECT `d_end`.`SCHEMA_NAME`, `d_end`.`DIGEST`, `d_end`.`DIGEST_TEXT`, `d_end`.`COUNT_STAR`-IFNULL(`d_start`.`COUNT_STAR`, 0) AS ''COUNT_STAR'', `d_end`.`SUM_TIMER_WAIT`-IFNULL(`d_start`.`SUM_TIMER_WAIT`, 0) AS ''SUM_TIMER_WAIT'', `d_end`.`MIN_TIMER_WAIT` AS ''MIN_TIMER_WAIT'', IFNULL((`d_end`.`SUM_TIMER_WAIT`-IFNULL(`d_start`.`SUM_TIMER_WAIT`, 0))/NULLIF(`d_end`.`COUNT_STAR`-IFNULL(`d_start`.`COUNT_STAR`, 0), 0), 0) AS ''AVG_TIMER_WAIT'', `d_end`.`MAX_TIMER_WAIT` AS ''MAX_TIMER_WAIT'', `d_end`.`SUM_LOCK_TIME`-IFNULL(`d_start`.`SUM_LOCK_TIME`, 0) AS ''SUM_LOCK_TIME'', `d_end`.`SUM_ERRORS`-IFNULL(`d_start`.`SUM_ERRORS`, 0) AS ''SUM_ERRORS'', `d_end`.`SUM_WARNINGS`-IFNULL(`d_start`.`SUM_WARNINGS`, 0) AS ''SUM_WARNINGS'', `d_end`.`SUM_ROWS_AFFECTED`-IFNULL(`d_start`.`SUM_ROWS_AFFECTED`, 0) AS ''SUM_ROWS_AFFECTED'', `d_end`.`SUM_ROWS_SENT`-IFNULL(`d_start`.`SUM_ROWS_SENT`, 0) AS ''SUM_ROWS_SENT'', `d_end`.`SUM_ROWS_EXAMINED`-IFNULL(`d_start`.`SUM_ROWS_EXAMINED`, 0) AS ''SUM_ROWS_EXAMINED'', `d_end`.`SUM_CREATED_TMP_DISK_TABLES`-IFNULL(`d_start`.`SUM_CREATED_TMP_DISK_TABLES`, 0) AS ''SUM_CREATED_TMP_DISK_TABLES'', `d_end`.`SUM_CREATED_TMP_TABLES`-IFNULL(`d_start`.`SUM_CREATED_TMP_TABLES`, 0) AS ''SUM_CREATED_TMP_TABLES'', `d_end`.`SUM_SELECT_FULL_JOIN`-IFNULL(`d_start`.`SUM_SELECT_FULL_JOIN`, 0) AS ''SUM_SELECT_FULL_JOIN'', `d_end`.`SUM_SELECT_FULL_RANGE_JOIN`-IFNULL(`d_start`.`SUM_SELECT_FULL_RANGE_JOIN`, 0) AS ''SUM_SELECT_FULL_RANGE_JOIN'', `d_end`.`SUM_SELECT_RANGE`-IFNULL(`d_start`.`SUM_SELECT_RANGE`, 0) AS ''SUM_SELECT_RANGE'', `d_end`.`SUM_SELECT_RANGE_CHECK`-IFNULL(`d_start`.`SUM_SELECT_RANGE_CHECK`, 0) AS ''SUM_SELECT_RANGE_CHECK'', `d_end`.`SUM_SELECT_SCAN`-IFNULL(`d_start`.`SUM_SELECT_SCAN`, 0) AS ''SUM_SELECT_SCAN'', `d_end`.`SUM_SORT_MERGE_PASSES`-IFNULL(`d_start`.`SUM_SORT_MERGE_PASSES`, 0) AS ''SUM_SORT_MERGE_PASSES'', `d_end`.`SUM_SORT_RANGE`-IFNULL(`d_start`.`SUM_SORT_RANGE`, 0) AS ''SUM_SORT_RANGE'', `d_end`.`SUM_SORT_ROWS`-IFNULL(`d_start`.`SUM_SORT_ROWS`, 0) AS ''SUM_SORT_ROWS'', `d_end`.`SUM_SORT_SCAN`-IFNULL(`d_start`.`SUM_SORT_SCAN`, 0) AS ''SUM_SORT_SCAN'', `d_end`.`SUM_NO_INDEX_USED`-IFNULL(`d_start`.`SUM_NO_INDEX_USED`, 0) AS ''SUM_NO_INDEX_USED'', `d_end`.`SUM_NO_GOOD_INDEX_USED`-IFNULL(`d_start`.`SUM_NO_GOOD_INDEX_USED`, 0) AS ''SUM_NO_GOOD_INDEX_USED'', `d_end`.`FIRST_SEEN`, `d_end`.`LAST_SEEN`, `d_end`.`QUANTILE_95`, `d_end`.`QUANTILE_99`, `d_end`.`QUANTILE_999`, `d_end`.`QUERY_SAMPLE_TEXT`, `d_end`.`QUERY_SAMPLE_SEEN`, `d_end`.`QUERY_SAMPLE_TIMER_WAIT` FROM tmp_digests d_end LEFT OUTER JOIN ', v_quoted_table, ' d_start ON `d_start`.`DIGEST` = `d_end`.`DIGEST` AND (`d_start`.`SCHEMA_NAME` = `d_end`.`SCHEMA_NAME` OR (`d_start`.`SCHEMA_NAME` IS NULL AND `d_end`.`SCHEMA_NAME` IS NULL) ) WHERE `d_end`.`COUNT_STAR`-IFNULL(`d_start`.`COUNT_STAR`, 0) > 0'); CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('with_runtimes_in_95th_percentile', in_views)) THEN SELECT 'Queries with Runtime in 95th Percentile' AS 'Next Output';  DROP TEMPORARY TABLE IF EXISTS tmp_digest_avg_latency_distribution1; DROP TEMPORARY TABLE IF EXISTS tmp_digest_avg_latency_distribution2; DROP TEMPORARY TABLE IF EXISTS tmp_digest_95th_percentile_by_avg_us;  CREATE TEMPORARY TABLE tmp_digest_avg_latency_distribution1 ( cnt bigint unsigned NOT NULL, avg_us decimal(21,0) NOT NULL, PRIMARY KEY (avg_us) ) ENGINE=InnoDB;  SET v_sql = CONCAT('INSERT INTO tmp_digest_avg_latency_distribution1 SELECT COUNT(*) cnt, ROUND(avg_timer_wait/1000000) AS avg_us FROM ', v_digests_table, ' GROUP BY avg_us'); CALL sys.execute_prepared_stmt(v_sql);  CREATE TEMPORARY TABLE tmp_digest_avg_latency_distribution2 LIKE tmp_digest_avg_latency_distribution1; INSERT INTO tmp_digest_avg_latency_distribution2 SELECT * FROM tmp_digest_avg_latency_distribution1;  CREATE TEMPORARY TABLE tmp_digest_95th_percentile_by_avg_us ( avg_us decimal(21,0) NOT NULL, percentile decimal(46,4) NOT NULL, PRIMARY KEY (avg_us) ) ENGINE=InnoDB;  SET v_sql = CONCAT('INSERT INTO tmp_digest_95th_percentile_by_avg_us SELECT s2.avg_us avg_us, IFNULL(SUM(s1.cnt)/NULLIF((SELECT COUNT(*) FROM ', v_digests_table, '), 0), 0) percentile FROM tmp_digest_avg_latency_distribution1 AS s1 JOIN tmp_digest_avg_latency_distribution2 AS s2 ON s1.avg_us <= s2.avg_us GROUP BY s2.avg_us HAVING percentile > 0.95 ORDER BY percentile LIMIT 1'); CALL sys.execute_prepared_stmt(v_sql);  SET v_sql = REPLACE( REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statements_with_runtimes_in_95th_percentile' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ), 'sys.x$ps_digest_95th_percentile_by_avg_us', '`sys`.`x$ps_digest_95th_percentile_by_avg_us`' ); CALL sys.execute_prepared_stmt(v_sql);  DROP TEMPORARY TABLE tmp_digest_avg_latency_distribution1; DROP TEMPORARY TABLE tmp_digest_avg_latency_distribution2; DROP TEMPORARY TABLE tmp_digest_95th_percentile_by_avg_us; END IF;  IF (FIND_IN_SET('analysis', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries Ordered by Total Latency') AS 'Next Output'; SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statement_analysis' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF; CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('with_errors_or_warnings', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries with Errors') AS 'Next Output'; SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statements_with_errors_or_warnings' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF; CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('with_full_table_scans', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries with Full Table Scan') AS 'Next Output'; SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statements_with_full_table_scans' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF; CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('with_sorting', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries with Sorting') AS 'Next Output'; SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statements_with_sorting' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF; CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('with_temp_tables', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries with Internal Temporary Tables') AS 'Next Output'; SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'statements_with_temp_tables' ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF; CALL sys.execute_prepared_stmt(v_sql); END IF;  IF (FIND_IN_SET('custom', in_views)) THEN SELECT CONCAT('Top ', @sys.statement_performance_analyzer.limit, ' Queries Using Custom View') AS 'Next Output';  IF (@sys.statement_performance_analyzer.view IS NULL) THEN SET @sys.statement_performance_analyzer.view = sys.sys_get_config('statement_performance_analyzer.view', NULL); END IF; IF (@sys.statement_performance_analyzer.view IS NULL) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The @sys.statement_performance_analyzer.view user variable must be set with the view or query to use.'; END IF;  IF (NOT INSTR(@sys.statement_performance_analyzer.view, ' ')) THEN IF (NOT INSTR(@sys.statement_performance_analyzer.view, '.')) THEN SET v_custom_db   = DATABASE(), v_custom_name = @sys.statement_performance_analyzer.view; ELSE SET v_custom_db   = SUBSTRING_INDEX(@sys.statement_performance_analyzer.view, '.', 1); SET v_custom_name = SUBSTRING(@sys.statement_performance_analyzer.view, CHAR_LENGTH(v_custom_db)+2); END IF;  CALL sys.table_exists(v_custom_db, v_custom_name, v_custom_view_exists); IF (v_custom_view_exists <> 'VIEW') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The @sys.statement_performance_analyzer.view user variable is set but specified neither an existing view nor a query.'; END IF;  SET v_sql = REPLACE( (SELECT VIEW_DEFINITION FROM information_schema.VIEWS WHERE TABLE_SCHEMA = v_custom_db AND TABLE_NAME = v_custom_name ), '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table ); ELSE SET v_sql = REPLACE(@sys.statement_performance_analyzer.view, '`performance_schema`.`events_statements_summary_by_digest`', v_digests_table); END IF;  IF (@sys.statement_performance_analyzer.limit > 0) THEN SET v_sql = CONCAT(v_sql, ' LIMIT ', @sys.statement_performance_analyzer.limit); END IF;  CALL sys.execute_prepared_stmt(v_sql); END IF; END IF;  IF (v_this_thread_enabled = 'YES') THEN CALL sys.ps_setup_enable_thread(CONNECTION_ID()); END IF;  IF (@log_bin = 1) THEN SET sql_log_bin = @log_bin; END IF; END
;;
delimiter ;

-- ----------------------------
-- Function structure for sys_get_config
-- ----------------------------
DROP FUNCTION IF EXISTS `sys_get_config`;
delimiter ;;
CREATE FUNCTION `sys_get_config`(in_variable_name VARCHAR(128), in_default_value VARCHAR(128))
 RETURNS varchar(128) CHARSET utf8mb4
  READS SQL DATA 
  DETERMINISTIC
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Returns the value for the requested variable using the following logic:\r\n \r\n 1. If the option exists in sys.sys_config return the value from there.\r\n 2. Else fall back on the provided default value.\r\n \r\n Notes for using sys_get_config():\r\n \r\n * If the default value argument to sys_get_config() is NULL and case 2. is reached, NULL is returned.\r\n It is then expected that the caller is able to handle NULL for the given configuration option.\r\n * The convention is to name the user variables @sys.<name of variable>. It is <name of variable> that\r\n is stored in the sys_config table and is what is expected as the argument to sys_get_config().\r\n * If you want to check whether the configuration option has already been set and if not assign with\r\n the return value of sys_get_config() you can use IFNULL(...) (see example below). However this should\r\n not be done inside a loop (e.g. for each row in a result set) as for repeated calls where assignment\r\n is only needed in the first iteration using IFNULL(...) is expected to be significantly slower than\r\n using an IF (...) THEN ... END IF; block (see example below).\r\n \r\n Parameters\r\n \r\n in_variable_name (VARCHAR(128)):\r\n The name of the config option to return the value for.\r\n \r\n in_default_value (VARCHAR(128)):\r\n The default value to return if the variable does not exist in sys.sys_config.\r\n \r\n Returns\r\n \r\n VARCHAR(128)\r\n \r\n Example\r\n \r\n mysql> SELECT sys.sys_get_config(\'statement_truncate_len\', 128) AS Value;\r\n +-------+\r\n | Value |\r\n +-------+\r\n | 64    |\r\n +-------+\r\n 1 row in set (0.00 sec)\r\n \r\n mysql> SET @sys.statement_truncate_len = IFNULL(@sys.statement_truncate_len, sys.sys_get_config(\'statement_truncate_len\', 64));\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n IF (@sys.statement_truncate_len IS NULL) THEN\r\n SET @sys.statement_truncate_len = sys.sys_get_config(\'statement_truncate_len\', 64);\r\n END IF;\r\n '
BEGIN DECLARE v_value VARCHAR(128) DEFAULT NULL;  SET v_value = (SELECT value FROM sys.sys_config WHERE variable = in_variable_name);  IF (v_value IS NULL) THEN SET v_value = in_default_value; END IF;  RETURN v_value; END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for table_exists
-- ----------------------------
DROP PROCEDURE IF EXISTS `table_exists`;
delimiter ;;
CREATE PROCEDURE `table_exists`(IN in_db VARCHAR(64), IN in_table VARCHAR(64), OUT out_exists ENUM('', 'BASE TABLE', 'VIEW', 'TEMPORARY'))
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Tests whether the table specified in in_db and in_table exists either as a regular\r\n table, or as a temporary table. The returned value corresponds to the table that\r\n will be used, so if there\'s both a temporary and a permanent table with the given\r\n name, then \'TEMPORARY\' will be returned.\r\n \r\n Parameters\r\n \r\n in_db (VARCHAR(64)):\r\n The database name to check for the existance of the table in.\r\n \r\n in_table (VARCHAR(64)):\r\n The name of the table to check the existance of.\r\n \r\n out_exists ENUM(\'\', \'BASE TABLE\', \'VIEW\', \'TEMPORARY\'):\r\n The return value: whether the table exists. The value is one of:\r\n * \'\'           - the table does not exist neither as a base table, view, nor temporary table.\r\n * \'BASE TABLE\' - the table name exists as a permanent base table table.\r\n * \'VIEW\'       - the table name exists as a view.\r\n * \'TEMPORARY\'  - the table name exists as a temporary table.\r\n \r\n Example\r\n \r\n mysql> CREATE DATABASE db1;\r\n Query OK, 1 row affected (0.07 sec)\r\n \r\n mysql> use db1;\r\n Database changed\r\n mysql> CREATE TABLE t1 (id INT PRIMARY KEY);\r\n Query OK, 0 rows affected (0.08 sec)\r\n \r\n mysql> CREATE TABLE t2 (id INT PRIMARY KEY);\r\n Query OK, 0 rows affected (0.08 sec)\r\n \r\n mysql> CREATE view v_t1 AS SELECT * FROM t1;\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n mysql> CREATE TEMPORARY TABLE t1 (id INT PRIMARY KEY);\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n mysql> CALL sys.table_exists(\'db1\', \'t1\', @exists); SELECT @exists;\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n +------------+\r\n | @exists    |\r\n +------------+\r\n | TEMPORARY  |\r\n +------------+\r\n 1 row in set (0.00 sec)\r\n \r\n mysql> CALL sys.table_exists(\'db1\', \'t2\', @exists); SELECT @exists;\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n +------------+\r\n | @exists    |\r\n +------------+\r\n | BASE TABLE |\r\n +------------+\r\n 1 row in set (0.01 sec)\r\n \r\n mysql> CALL sys.table_exists(\'db1\', \'v_t1\', @exists); SELECT @exists;\r\n Query OK, 0 rows affected (0.00 sec)\r\n \r\n +---------+\r\n | @exists |\r\n +---------+\r\n | VIEW    |\r\n +---------+\r\n 1 row in set (0.00 sec)\r\n \r\n mysql> CALL sys.table_exists(\'db1\', \'t3\', @exists); SELECT @exists;\r\n Query OK, 0 rows affected (0.01 sec)\r\n \r\n +---------+\r\n | @exists |\r\n +---------+\r\n |         |\r\n +---------+\r\n 1 row in set (0.00 sec)\r\n '
BEGIN DECLARE v_error BOOLEAN DEFAULT FALSE; DECLARE CONTINUE HANDLER FOR 1050 SET v_error = TRUE; DECLARE CONTINUE HANDLER FOR 1146 SET v_error = TRUE;  SET out_exists = '';  IF (EXISTS(SELECT 1 FROM information_schema.TABLES WHERE TABLE_SCHEMA = in_db AND TABLE_NAME = in_table)) THEN SET @sys.tmp.table_exists.SQL = CONCAT('CREATE TEMPORARY TABLE `', in_db, '`.`', in_table, '` (id INT PRIMARY KEY)'); PREPARE stmt_create_table FROM @sys.tmp.table_exists.SQL; EXECUTE stmt_create_table; DEALLOCATE PREPARE stmt_create_table; IF (v_error) THEN SET out_exists = 'TEMPORARY'; ELSE SET @sys.tmp.table_exists.SQL = CONCAT('DROP TEMPORARY TABLE `', in_db, '`.`', in_table, '`'); PREPARE stmt_drop_table FROM @sys.tmp.table_exists.SQL; EXECUTE stmt_drop_table; DEALLOCATE PREPARE stmt_drop_table; SET out_exists = (SELECT TABLE_TYPE FROM information_schema.TABLES WHERE TABLE_SCHEMA = in_db AND TABLE_NAME = in_table); END IF; ELSE SET @sys.tmp.table_exists.SQL = CONCAT('SELECT COUNT(*) FROM `', in_db, '`.`', in_table, '`'); PREPARE stmt_select FROM @sys.tmp.table_exists.SQL; IF (NOT v_error) THEN DEALLOCATE PREPARE stmt_select; SET out_exists = 'TEMPORARY'; END IF; END IF; END
;;
delimiter ;

-- ----------------------------
-- Function structure for version_major
-- ----------------------------
DROP FUNCTION IF EXISTS `version_major`;
delimiter ;;
CREATE FUNCTION `version_major`()
 RETURNS tinyint(3) unsigned
  NO SQL 
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Returns the major version of MySQL Server.\r\n \r\n Returns\r\n \r\n TINYINT UNSIGNED\r\n \r\n Example\r\n \r\n mysql> SELECT VERSION(), sys.version_major();\r\n +--------------------------------------+---------------------+\r\n | VERSION()                            | sys.version_major() |\r\n +--------------------------------------+---------------------+\r\n | 5.7.9-enterprise-commercial-advanced | 5                   |\r\n +--------------------------------------+---------------------+\r\n 1 row in set (0.00 sec)\r\n '
BEGIN RETURN SUBSTRING_INDEX(SUBSTRING_INDEX(VERSION(), '-', 1), '.', 1); END
;;
delimiter ;

-- ----------------------------
-- Function structure for version_minor
-- ----------------------------
DROP FUNCTION IF EXISTS `version_minor`;
delimiter ;;
CREATE FUNCTION `version_minor`()
 RETURNS tinyint(3) unsigned
  NO SQL 
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Returns the minor (release series) version of MySQL Server.\r\n \r\n Returns\r\n \r\n TINYINT UNSIGNED\r\n \r\n Example\r\n \r\n mysql> SELECT VERSION(), sys.server_minor();\r\n +--------------------------------------+---------------------+\r\n | VERSION()                            | sys.version_minor() |\r\n +--------------------------------------+---------------------+\r\n | 5.7.9-enterprise-commercial-advanced | 7                   |\r\n +--------------------------------------+---------------------+\r\n 1 row in set (0.00 sec)\r\n '
BEGIN RETURN SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(VERSION(), '-', 1), '.', 2), '.', -1); END
;;
delimiter ;

-- ----------------------------
-- Function structure for version_patch
-- ----------------------------
DROP FUNCTION IF EXISTS `version_patch`;
delimiter ;;
CREATE FUNCTION `version_patch`()
 RETURNS tinyint(3) unsigned
  NO SQL 
  SQL SECURITY INVOKER
  COMMENT '\r\n Description\r\n \r\n Returns the patch release version of MySQL Server.\r\n \r\n Returns\r\n \r\n TINYINT UNSIGNED\r\n \r\n Example\r\n \r\n mysql> SELECT VERSION(), sys.version_patch();\r\n +--------------------------------------+---------------------+\r\n | VERSION()                            | sys.version_patch() |\r\n +--------------------------------------+---------------------+\r\n | 5.7.9-enterprise-commercial-advanced | 9                   |\r\n +--------------------------------------+---------------------+\r\n 1 row in set (0.00 sec)\r\n '
BEGIN RETURN SUBSTRING_INDEX(SUBSTRING_INDEX(VERSION(), '-', 1), '.', -1); END
;;
delimiter ;

SET FOREIGN_KEY_CHECKS = 1;
